---
- name: Set the hostname
  hostname:
    name: "{{ inventory_hostname }}"

- name: Update and upgrade apt packages (Debian and Ubuntu)
  when: ansible_os_family == 'Debian'
  shell:
    cmd: apt update && apt upgrade -y

- name: Generate the locale (Debian and Ubuntu)
  when: ansible_os_family == 'Debian'
  locale_gen:
    name: "{{ locale }}"
    state: present
  tags: lang

- name: Set the locale
  when: ansible_os_family == 'Debian'
  command: "localectl set-locale LANG={{ locale }}"
  tags: lang

- name: Installing packages
  apt:
    name: '{{ item }}'
    state: present
    update_cache: True
  with_items:
    - git
    - vim

- name: Ensure fstrim.timer is enabled 
  ansible.builtin.systemd:
    state: started
    name: fstrim.timer

- name: Copy the host's public SSH key to the remote server
  become: no
  authorized_key:
    user: "{{ username }}"
    state: present
    key: "{{ lookup('file', '/Users/' + lookup('env', 'USER') + '/.ssh/id_rsa.pub') }}"

- name: Check swap size
  shell: grep -E "CONF_SWAPSIZE=100" /etc/dphys-swapfile || echo false
  register: grep_output

- name: Disable Swap
  shell: dphys-swapfile swapoff
  when: grep_output.stdout != "false"

- name: Change swap size to 4gb
  shell: sed -i 's/CONF_SWAPSIZE=100/CONF_SWAPSIZE=4096/g' /etc/dphys-swapfile
  when: grep_output.stdout != "false"

- name: Initialise Swap File
  shell: dphys-swapfile setup
  when: grep_output.stdout != "false"

- name: Start Swap
  shell: dphys-swapfile swapon
  when: grep_output.stdout != "false"

- name: Check /boot/config.txt
  shell: grep -E "arm_64bit=1" /boot/config.txt || echo false
  register: grep_output

- name: Add arm_64bit=1 to /boot/config.txt under [pi4]
  shell: sed -i 's/\[pi4\]/\[pi4\]\narm_64bit=1/g' /boot/config.txt
  when: grep_output.stdout != "false"

- name: Check if reboot required
  stat:
    path: /var/run/reboot-required
  register: reboot_required_file

- name: Reboot if required
  reboot:
    msg: Rebooting due to a kernel update
  when: reboot_required_file.stat.exists == true

- name: Check if {{ item }} directory exists
  stat:
    path: "{{ item }}"
  with_items:
    - "{{ docker_dir }}"
    - "{{ scripts_dir }}"
  register: config_dir
  tags: dir

- name: Create {{ item }} directory if it doesn't already exist
  file:
    path: "{{ item.item }}"
    state: directory
    owner: "{{ username }}"
    group: "{{ username }}"
    mode: "0755"
  with_items:
    - "{{ config_dir.results }}"
  when:
    - not item.stat.exists
  tags: dir

- name: Configure cron PATH
  cron:
    name: PATH
    user: "{{ username }}"
    env: yes
    job: "/usr/sbin:/usr/bin:/sbin:/bin:/usr/local/bin"
  tags: cron

- name: Enable cron e-mail notifications
  cron:
    name: MAILTO
    user: "{{ username }}"
    env: yes
    job: "{{ cron_email }}"
  tags: cron