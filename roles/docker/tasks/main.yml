---
- name: Set Facts
  set_fact:
    repo: deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
  when: ansible_architecture == "x86_64"

- name: Set Facts
  set_fact:
    repo: deb [arch=armhf signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/debian {{ ansible_distribution_release }} stable
  when: ansible_architecture == "aarch64"

- name: Install Prerequisites
  apt:
    name: '{{ packages }}'
    state: present
  vars:
    packages:
      - apt-transport-https
      - ca-certificates
      - curl
      - gnupg
      - lsb-release
      - software-properties-common
      - libssl-dev
      - libffi-dev
      - python3
      - python3-pip
      - python3-venv
      - python-setuptools

- name: Add Docker's official GPG key
  apt_key:
    url: https://download.docker.com/linux/debian/gpg
    state: present
    keyring: /usr/share/keyrings/docker-archive-keyring.gpg

- name: Add Docker Stable Repository
  apt_repository:
    repo: '{{ repo }}'
    state: present
    filename: docker
    update_cache: yes

- name: Install Docker Engine 
  apt:
    name: '{{ packages }}'
    state: present
  vars:
    packages:
      - docker-ce
      - docker-ce-cli
      - containerd.io
  tags: docker

- name: Add 'pi' user to the group 'docker'
  ansible.builtin.user:
    name: pi
    shell: /bin/bash
    groups: docker
    append: yes
  tags: docker

- name: Give permissions to /var/run/docker.sock
  file:
    path: /var/run/docker.sock
    mode: '660'
  tags: docker

- name: Enable and start Docker service
  systemd:
    name: docker.service
    enabled: true
    state: started
  tags: docker

- name: Install docker-compose
  pip:
    name: 
      - cryptography==2.8
      - docker-compose
    executable: pip3
  tags: docker

# Should I stop all containers first? Rare scenario...

- name: Setup {{ docker_dir }}
  when: "restore_from_timemachine | default(False)"
  block:
  - name: Check if {{ docker_dir }} directory exists
    stat:
      path: "{{ docker_dir }}"
    register: docker_dir

  - name: Check if {{ docker_dir }} directory is empty
    find:
      paths:
        - "{{ docker_dir }}"
      recurse: yes
    register: docker_data_find
    when: docker_dir.stat.exists

  - name: Create {{ docker_dir }} directory
    file:
      path: "{{ docker_dir }}"
      state: directory
      owner: "{{ username }}"
      group: "{{ username }}"
      mode: "0755"
    when: not docker_dir.stat.exists
  
  - name: Restore the "{{ docker_dir }}" folder from the timemachine backup
    synchronize:
      src: "{{ timemachine_root }}/docker_data/"
      dest: "{{ docker_dir }}"
      delete: true
      recursive: yes
    delegate_to: "{{ inventory_hostname }}"
    when: not docker_dir.stat.exists or docker_data_find.matched == 0