#!/bin/bash

### CONFIGURATION
#
# input arguments
src="${1}" # source
dest="${2}" # destination

# optional
# log_path="/var/log/" # override default log with your own location

# other options - https://rclone.org/flags/
EXCLUDE_FILE="$(dirname "$0")/exclude_file.txt" # read file exclusion patterns from file

### FUNCTIONS
#
# hash/obfuscate string
function hash() { md5sum < /dev/stdin | cut -f1 -d " "; }

# humanize seconds - https://unix.stackexchange.com/a/27014
function displaytime {
    local T=$1
    local D=$((T/60/60/24))
    local H=$((T/60/60%24))
    local M=$((T/60%60))
    local S=$((T%60))
    (( $D > 0 )) && printf '%dd' $D
    (( $H > 0 )) && printf '%dh' $H
    (( $M > 0 )) && printf '%dm' $M
    printf '%ds' $S
}

# takes unix epoch date as input and displays difference in seconds
function display_time_difference() {
    local seconds_diff="$(( $(date +%s) - $1 ))"
    echo "$(displaytime "$seconds_diff")"
}

# we'll use these to differentiate between executions and ensure only one sync happens at a time
src_dest_id="$(echo "${src}${dest}" | hash)"
execution_id="$(echo "$(date +%s)${src_dest_id}" | hash)"
lockfile="/tmp/rclone-${src_dest_id}.lock"

# let's get some help keeping our output formatted consistently
function format_output() {
    local timestamp="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
    local message="$(</dev/stdin)"
    if [ -n "$message" ]; then
        echo "${timestamp} | ${execution_id:0:7} | $message"
    fi
}


### VALIDATE
#
# check whether the path (local or remote) exists
function check_path() {
    [[ -d "$1" ]] >/dev/null 2>&1 || (echo "warning: input path ($1) does not exist, script will exit" | format_output; exit 1)
}

check_path "$src"
check_path "$dest"


### RUN TIME
#
# function to run if there's already an active process running
exit_on_lock() {
    echo "warning: another sync is already in progress, script will exit" | format_output
    exit 1
}

(
    # check if a lock file exists for this src/dest combo
    flock -n 9 || exit_on_lock

    # it's syncing time!
    echo "starting timemachine backup ($src -> $dest)" | format_output
    start_time="$(date +%s)"
    {{ scripts_dir }}/rsync-time-backup/rsync_tmbackup.sh --log-dir "$src/.rsync_tmbackup" "$src" "$dest" "$EXCLUDE_FILE"

    # finato
    duration="$(display_time_difference "$start_time")"
    echo "success: timemachine backup complete! (took "$duration")" | format_output

) 9>"$lockfile"
